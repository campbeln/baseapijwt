//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-03-09
'use strict';

//##################################################
//# .require the modules
//##################################################
//# .require the Node modules
const $express = require("express"),
    $httpServer = $express(),
    $cookieParser = require('cookie-parser'),
    $bodyParser = require("body-parser"),
    $compression = require('compression'),
    $path = require('path')
;

//# .require ishJS + extensions
//#     TODO: NPM-ify ishJS to require("@ish"), require("@ish/io.net"), etc.?
const $app = require("./libs/ish/ish.js");
    require("./libs/ish/ish.type-ex.js")($app);
    require("./libs/ish/ish.type.date-format.js")($app);
    require("./libs/ish/ish.io.net.js")($app);
    require("./libs/ish/ish.io.web.js")($app);
    require("./libs/ish/ish.io.csv.js")($app);
    require("./libs/ish/ish.oop.inherit.js")($app);
    require("./libs/ish/ish.oop.overload.js")($app);
    require("./libs/ish/ish.type.enum.js")($app);


//##################################################
//# Configure the $app
//##################################################
//# Pull in our .config then setup our $app
require("./app/_app.js")($app, $express, $httpServer);
require("./app/app-ex.js")($app);
$app.app.config = $app.extend(
    require("./app/config/base.json"),
    require("./app/config/" + (
        $app.type.str.cmp($app.app.config.args[0], ["dev", "prod"]) ||
        "prod"
    ) + ".json")
);


//##################################################
//# Configure the $httpServer
//##################################################
//# Support compressed bodies
$httpServer.use($compression({
    filter: (oRequest, oResponse) => {
        return (oRequest.headers['x-no-compression'] ?
            false :
            $compression.filter(oRequest, oResponse)
        );
    },
    threshold: 0
}));

//# If this is not .baseElmer, enable .json and .urlencoded $bodyParser
//#     NOTE: As the $bodyParser consumes the posted body, we must exclude any proxied routes
//#     SEE: https://stackoverflow.com/questions/28371641/how-can-i-use-express-http-proxy-after-bodyparser-json-has-been-called
if (!$app.app.config.baseElmer) {
    //# Support json-encoded bodies
    $httpServer.use($bodyParser.json({
        //type: "*/*",
        //inflate: true,
        limit: $app.app.config.uploadLimitMb + "mb"
    }));

    //# Support url-encoded bodies
    $httpServer.use($bodyParser.urlencoded({
        limit: $app.app.config.uploadLimitMb + "mb",
        extended: true
    }));
}

//# Support parsing cookies
$httpServer.use($cookieParser());

//# Setup the /www route for static content
//# curl -X GET http://localhost:3000/www/ from /app/www
//# See: https://expressjs.com/en/starter/static-files.html
$httpServer.use('/www', $express.static($path.join(__dirname, 'app', 'www')));

//# Log each API request
//$httpServer.use("/", require("./app/middleware/logapi.js")($app));

//# Spin-up the $httpServer, barfing out the versions to the console as we go
//#     NOTE: Cannot bind to 127.0.0.1 as in Docker the server returns with "curl: (52) Empty reply from server"
$httpServer.listen($app.app.config.port, "0.0.0.0", async () => {
    $app.app.status = {
        name: $app.app.config.name,
        port: $app.app.config.port,
        portLocal: $app.app.config.portLocal,
        started: $app.type.date.format(Date.now(), "YYYY/MM/DD hh:mm:ss"),
        versions: {
            ish: $app.config.ish().ver,
            app: $app.app.version,
            appEx: $app.app.versionEx
        }
    };
    
    //##################################################
    //# Configure the routes
    //##################################################
    require("./app/routes/_routes.js")($app);
    (async function () {
        //# So long as this is not a .baseElmer instance
        if (!$app.app.config.baseElmer) {
            //# Setup the .api object (including .register'ing if configured to do so)
            $app.app.status.api = {
                heartbeat: ($app.resolve(await $app.app.services.web.apiUp($app.app.config.name), "ok") === true),
                registered: (
                    $app.app.config.forceRegistration ?
                    $app.type.bool.mk($app.resolve(await $app.app.services.web.register(), "json.registered"), false) :
                    false
                ),
                dependencies: (
                    $app.type.arr.is($app.app.config.dependencies, true) ?
                    $app.resolve(await $app.app.services.web.apiUp($app.app.config.dependencies), "ok") === true :
                    null
                )
            };
        }

        //# Output a pretty-ified JSON representation of our .status to standard out
        console.log(JSON.stringify($app.app.status, null, 2));
    })();
});
