//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-04-08
'use strict';


//#
module.exports = function ($elmer) {
    let $baseRouter = $elmer.app.services.web.router();


    //# Setup the root/heartbeat route
    //# curl -X GET http://localhost:3000/
    $baseRouter.get("/", async (oRequest, oResponse) => {
        let oQuerystring = $elmer.io.web.queryString.parse(oRequest.url);

        //# If this is a .register call
        if ($elmer.type.bool.mk(oQuerystring.register, false)) {
            let sServer = ($elmer.app.config.baseElmer ?
                    $elmer.app.config.name + "." + $elmer.app.config.hostname :
                    $elmer.app.services.web.ip.address()                            //# SEE: https://www.abstractapi.com/guides/node-js-get-ip-address
                ),
                /*oAPIResponse = await $elmer.io.net.get(
                    "http://" + $elmer.app.config.net + "." + $elmer.app.config.hostname + ":" + $elmer.app.config.port +
                        "/elmer/proxy/?route=" + $elmer.app.config.name +
                        "&port=" + $elmer.app.config.port +
                        "&secure=" + $elmer.type.bool.mk($elmer.app.config.secure, false) +
                        "&force=" + $elmer.type.bool.mk($elmer.app.config.forceRegister, true) +
                        "&ip=" + sServer
                ),*/
                oAPIResponse = await $elmer.io.net.post(
                    "http://" + $elmer.app.config.net + "." + $elmer.app.config.hostname + ":" + $elmer.app.config.port + "/elmer/proxy/",
                    {
                        route: $elmer.app.config.name,
                        port: $elmer.app.config.port,
                        force: $elmer.type.bool.mk($elmer.app.config.forceRegister, true),
                        server: sServer,
                        config: $elmer.type.obj.mk(oRequest.elmer)
                    }
                )
            ;

            //# Set the oResponse based on the oAPIResponse above
            oResponse
                .status(oAPIResponse.status) // (oAPIResponse.ok ? 200 : $elmer.io.net.status.clientError.conflict)
                .json({
                    registered: oAPIResponse.ok,
                    api: oAPIResponse
                })
            ;
        }
        //# Else this is a heartbeat call, so set the oResponse accordingly
        else {
            oResponse.status(200).json({
                ok: true,
                message: "Hi ðŸ‘‹ from " + $elmer.app.config.name,
                time: new Date(),
                localTime: $elmer.type.date.format(new Date(), "YYYY-MM-DD HH:mm:ss"),
                versions: {
                    ish: $elmer.config.ish().ver,
                    app: $elmer.app.version,
                    appEx: $elmer.app.versionEx
                }
            });
        }
    }); //# "/"

    //# .register our $baseRouter then if we're .baseElmer the /login route
    $elmer.app.services.web.router.register("", $baseRouter /*, {} */);
    if ($elmer.app.config.baseElmer) {
        require(__dirname + "/../middleware/_jwt.js")($elmer /*, {} */);
        $elmer.app.services.web.router.register("/login", $elmer.app.services.security.jwt.loginRouter() /*, {} */);
    }

    //# .requireDir of all the other /routes, processing each in turn
    $elmer.app.services.fs.requireDir("routes", ["_routes.js"], function (fnRequiredFile, oFS) {
        let vReturn,
            $fileRouter = $elmer.app.services.web.router()
        ;

        //# Pass in the above-created $fileRouter along with our $baseRouter to the fnRequiredFile
        vReturn = fnRequiredFile($elmer, $fileRouter, $baseRouter);

        //# So long as the vReturn isn't false, .register the route
        if (vReturn !== false) {
            $fileRouter = vReturn || $fileRouter;
            $elmer.app.services.web.router.register(oFS.url, $fileRouter /*, {} */);
        }
    });
};
