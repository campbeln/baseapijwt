//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-04-04
'use strict';


module.exports = function ($elmer) {
    let $baseRouter = $elmer.app.services.web.router();


    //# Setup the root/heartbeat route
    //# curl -X GET http://localhost:3000/
    $baseRouter.get("/", async (oRequest, oResponse) => {
        let oQuerystring = $elmer.io.web.queryString.parse(oRequest.url),
            bRegister = $elmer.type.bool.mk(oQuerystring.register, false),
            bLogin = $elmer.type.bool.mk(oQuerystring.login, false)
        ;

        //# If this is a bRegister call, bRegister
        if (bRegister) {
            let sIP = ($elmer.app.config.baseElmer ?
                    $elmer.app.config.name + "." + $elmer.app.config.hostname :
                    $elmer.app.services.web.ip.address() //# https://www.abstractapi.com/guides/node-js-get-ip-address
                ),
                oAPIResponse = await $elmer.io.net.get(
                    "http://" + $elmer.app.config.net + "." + $elmer.app.config.hostname + ":" + $elmer.app.config.port +
                        "/elmer/proxy/?route=" + $elmer.app.config.name +
                        "&port=" + $elmer.app.config.port +
                        "&secure=" + $elmer.type.bool.mk($elmer.app.config.secure, false) +
                        "&force=" + $elmer.type.bool.mk($elmer.app.config.forceRegister, true) +
                        "&ip=" + sIP
                )
            ;

            oResponse.status(oAPIResponse.ok ? 200 : 500).json({ registered: oAPIResponse.ok, api: oAPIResponse });
        }
        //# Setup the login route
        else if (bLogin) {
            let oLogin = $elmer.app.services.web.login(oRequest);

            oResponse.status(200).json(oLogin);
        }
        //#
        else {
            oResponse.status(200).json({
                message: "Hi ðŸ‘‹ from " + $elmer.app.config.name,
                time: new Date(),
                localTime: $elmer.type.date.format(new Date(), "YYYY-MM-DD HH:mm:ss"),
                ok: true
            });
        }
    }); //# "/"


    //# .register our $baseRouter then .requireDir of all the other /routes, processing each in turn
    $elmer.app.services.web.router.register($baseRouter, "");
    $elmer.app.services.fs.requireDir("routes", ["_routes.js"], function (fnRequiredFile, oFS) {
        let $fileRouter = $elmer.app.services.web.router();

        //# Pass in the above-created $fileRouter along with our $baseRouter to the fnRequiredFile, overriding with any returned value from it then .register it
        $fileRouter = fnRequiredFile($elmer, $fileRouter, $baseRouter) || $fileRouter;
        $elmer.app.services.web.router.register($fileRouter, oFS.url);
    });

    //# Register a route without using $elmer.app.services.web.router.register
    //$elmer.app.services.web.router.register("example2"); //# <= works the same as the following line:
    //$elmer.app.services.web.server.use("/example2", require("./elmer.js")($elmer));
};
