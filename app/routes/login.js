//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-04-03
'use strict';


const $jwt = require('jsonwebtoken');
const $bodyParser = require("body-parser");


//# Set the .exports to the Elmer route function definition
module.exports = function ($app, $router /*, $baseRouter */) {
    //#
    async function login(oRequest, oResponse, eMode) {
        let a_oUsers, oJWTConfig, oRS, oConfig, i,
            bSuccess = false,
            oBody = $app.type.obj.mk(oRequest.body, null),
            oReturnVal = {
                error: 'Incorrect username/password combination.',
                body: oRequest.body
            }
        ;

        //#
        switch (eMode) {
            case $app.app.enums.userTypes.admin: {
                a_oUsers = $app.resolve($app.app.config, "security.jwt.admin");
                oConfig = {
                    expiresIn: "1 hours",
                    salt: $app.resolve($app.app, "config.security.jwt.salt.public.admin")
                };
                break;
            }
            case $app.app.enums.userTypes.internal: {
                a_oUsers = $app.resolve($app.app.config, "security.jwt.internal");
                oConfig = {
                    expiresIn: "8 hours",
                    salt: $app.resolve($app.app, "config.security.jwt.salt.public.internal")
                };
                break;
            }
            case $app.app.enums.userTypes.external: {
                a_oUsers = $app.resolve($app.app.config, "security.jwt.external");
                oConfig = {
                    expiresIn: "8 hours",
                    salt: $app.resolve($app.app, "config.security.jwt.salt.public.external")
                };
                break;
            }
        }

        //#
        oJWTConfig = $app.extend(
            {
                //mode: "jwt",                  //# Inferred by use of this module
                //realm: "api",                 //# Set below
                users: [{
                    u: null,
                    p: $app.type.symbol.get()   //# Force the password to be a unique value ensuring login fails if this default config is used
                }]
            },
            {
                users: a_oUsers
            }
        )

        //# Ensure the oJWTConfig values are properly set
        oJWTConfig.users = $app.type.arr.mk(oJWTConfig.users, [oJWTConfig.users]);
        oJWTConfig.realm = $app.type.str.mk(oJWTConfig.realm, "api");

//console.log(oBody, oRequest.body);

        //#
        if (oConfig && oBody && $app.type.arr.is(a_oUsers, true)) {
            //# Verify the username/password
            for (i = 0; i < a_oUsers.length; i++) {
console.log(oBody.username, a_oUsers[i].u);
console.log(oBody.password, a_oUsers[i].p);
                //# If the current .u(sername) and .p(assword) match, set our oUser and fall from the loop
                if ($app.type.obj.is(a_oUsers[i]) &&
                    oBody.username === a_oUsers[i].u &&
                    oBody.password === a_oUsers[i].p
                ) {
                    oRS = $app.extend({}, a_oUsers[i]);
                    delete oRS.p;
                    break;
                }
            }
            bSuccess = (oRS !== undefined);

            //# If the username/password was correct
            if (bSuccess) {
                //#
                oReturnVal = $app.extend(oRS, {
                    jwt: $jwt.sign(
                        {
                            username: oRS.username,
                            role: eMode
                        },
                        $app.app.config.security.jwtSecret,
                        {
                            expiresIn: oConfig.expiresIn
                        }
                    )
                });
            }
        }

        oResponse.status(bSuccess ? 200 : 401).json(oReturnVal);
    } //# login


    //# Support json-encoded bodies
    //#     SEE: https://stackoverflow.com/questions/28371641/how-can-i-use-express-http-proxy-after-bodyparser-json-has-been-called
    $app.app.services.web.server.use("/login", $bodyParser.json({
        //type: "*/*",
        //inflate: true,
        limit: '50mb'
    }));


    //# curl -X POST http://localhost:3000/login/verify/admin -H 'Content-Type: application/json' -d '{ "jwt":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNuIiwicm9sZSI6MCwiaWF0IjoxNjQwODQ3NzAwLCJleHAiOjE2NDA4NTEzMDB9.pGwQnctoytxpozWJPVlibkwCv1YauWhckKY7HFuHpC4" }'
    $router.post("/verify/:mode", (oRequest, oResponse) => {
        /*let sSalt;
        //#
        switch ($app.type.str.mk(oRequest.params.mode).toLowerCase()) {
            case "admin": {
                sSalt = $app.app.config.security.salt.admin;
                break;
            }
            case "internal": {
                sSalt = $app.app.config.security.salt.internal;
                break;
            }
            case "external": {
                sSalt = $app.app.config.security.salt.external;
                break;
            }
        }*/

        //#
        oResponse.json(
            $jwt.verify($app.resolve(oRequest.body, "jwt"), $app.app.config.security.jwtSecret)
        );
    }); //# /login/verify

    //# curl -X POST http://localhost:3000/login/admin -H 'Content-Type: application/json' -d '{ "username":"cn", "password":"secret" }'
    //# curl -X POST 'http://localhost:49155/slack/tolist/usernames' -H 'Content-Type: application/json' -d '{ "users": ["ncampbell"], "message": "Hi {username}, we noticed some Access Review items pending your approval. Please see https://jira.cs.sys/issues/?filter=43523 in order to view the review/approve tickets assigned to you pending your approval. As per each review ticket description, please *Approve* access or *Drive Changes*. (see Manager Access Review Process https://wiki.cs.sys/display/SECCOM/Manager+Access+Review+Process for detailed process walkthrough). Thank you for your help and feel free to tag our @access-review-team in #ask-compliance with any questions!" }'
    $router.post("/admin", async (oRequest, oResponse) => {
console.log("oRequest.body", oRequest.body);
        login(oRequest, oResponse, $app.app.enums.userTypes.admin);
    }); //# /login/admin

    //#
    $router.post("/internal", async (oRequest, oResponse) => {
        login(oRequest, oResponse, $app.app.enums.userTypes.internal);
    }); //# /login/internal

    //#
    $router.post("/external", async (oRequest, oResponse) => {
        login(oRequest, oResponse, $app.app.enums.userTypes.external);
    }); //# /login/external

    //#
    $router.post("/app/:baseroute", async (oRequest, oResponse) => {
        //login(oRequest, oResponse, $app.app.enums.userTypes.external);
    }); //# /login/app

    //#
    $router.post("/basic/:baseroute", async (oRequest, oResponse) => {
        //login(oRequest, oResponse, $app.app.enums.userTypes.external);
    }); //# /login/basic

    //#
    $router.post('*', (oRequest, oResponse) => {
        oResponse.status(401).json({
            error: 'Incorrect username/password combination.'
        });
    }); //# /login/*

};