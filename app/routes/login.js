//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-04-04
'use strict';


const $jwt = require('jsonwebtoken');
const $bodyParser = require("body-parser");


//# Set the .exports to the Elmer route function definition
module.exports = function ($app, $router /*, $baseRouter */) {
    let oSecurityConfig = $app.extend(
        {                           //# Expected shape of the JWT config
            //mode: "jwt",              //# Inferred
            salt: {
                //localSecret: "",      //# Not used below
                jwtSecret: "",          //# TODO: Set a default salt?
                public: {
                    admin: "",
                    internal: "",
                    external: ""
                }
            },
            admin: [],
            internal: [],
            external: []
        },
        $app.resolve($app.app.config, "security.jwt"),
        $app.resolve($router, "elmer.security")
    );

    //#
    async function login(oRequest, oResponse, eMode) {
        let oJWTConfig, oUser, i,
            oBody = $app.type.obj.mk(oRequest.body, null),
            oReturnVal = {
                error: 'Incorrect username/password combination.',
                body: oRequest.body
            }
        ;

        //# In order to avoid crypto timing attacks, use the decimal part of process.uptime to randomly and slightly delay processing of the oBody
        //#     NOTE: This is arguably security through obscurity, but as it's based on process.uptime its random by definition.
        setTimeout(
            function () {
                //# Determine the eMode, setting the oJWTConfig accordingly
                switch (eMode) {
                    case $app.app.enums.userTypes.admin: {
                        oJWTConfig = {
                            salt: oSecurityConfig.salt.public.admin,
                            users: oSecurityConfig.admin,
                            expiresIn: "1 hours"
                        };
                        break;
                    }
                    case $app.app.enums.userTypes.internal: {
                        oJWTConfig = {
                            salt: oSecurityConfig.salt.public.internal,
                            users: oSecurityConfig.internal,
                            expiresIn: "8 hours"
                        };
                        break;
                    }
                    case $app.app.enums.userTypes.external: {
                        oJWTConfig = {
                            salt: oSecurityConfig.salt.public.external,
                            users: oSecurityConfig.external,
                            expiresIn: "8 hours"
                        };
                        break;
                    }
                }

                //# If we have a posted .body, a valid oJWTConfig and a valid .jwtSecret
                if (oBody && oJWTConfig && $app.type.arr.is(oJWTConfig.users, true) && $app.type.str.is(oSecurityConfig.salt.jwtSecret, true)) {
                    //# Verify the username/password
                    for (i = 0; i < oJWTConfig.users.length; i++) {
                        //# If the current .u(sername) and .p(assword) match, set our oUser and fall from the loop
                        if ($app.type.obj.is(oJWTConfig.users[i]) &&
                            oBody.username === oJWTConfig.users[i].u &&
                            oBody.password === oJWTConfig.users[i].p
                        ) {
                            oUser = $app.extend({}, oJWTConfig.users[i]);
                            break;
                        }
                    }

                    //# If the username/password was correct, reset our oReturnVal to the oUser
                    if (oUser) {
                        oReturnVal = $app.extend(
                            oUser,
                            { p: undefined },
                            {
                                jwt: $jwt.sign(
                                    {
                                        username: oUser.u,
                                        role: eMode
                                    },
                                    oSecurityConfig.salt.jwtSecret,
                                    {
                                        expiresIn: oJWTConfig.expiresIn
                                    }
                                )
                            }
                        );
                    }
                }

                oResponse.status(oUser ? 200 : 401).json(oReturnVal);
            },
            Math.floor((process.uptime() % 1) * 100)
        );
    } //# login


    //# Support json-encoded bodies
    //#     SEE: https://stackoverflow.com/questions/28371641/how-can-i-use-express-http-proxy-after-bodyparser-json-has-been-called
    $app.app.services.web.server.use("/login", $bodyParser.json({
        //type: "*/*",
        //inflate: true,
        limit: '50mb'
    }));


    //# curl -X POST http://localhost:3000/login/verify/admin -H 'Content-Type: application/json' -d '{ "jwt":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNuIiwicm9sZSI6MCwiaWF0IjoxNjQwODQ3NzAwLCJleHAiOjE2NDA4NTEzMDB9.pGwQnctoytxpozWJPVlibkwCv1YauWhckKY7HFuHpC4" }'
    $router.post("/verify/:mode", (oRequest, oResponse) => {
        //# Return the result of $jwt.verify
        oResponse.status(200).json(
            $jwt.verify($app.resolve(oRequest.body, "jwt"), $app.app.config.security.jwt.salt.jwtSecret)
        );
    }); //# /login/verify


    //# curl -X POST http://localhost:3000/login/admin -H 'Content-Type: application/json' -d '{ "username":"cn", "password":"secret" }'
    //# curl -X POST 'http://localhost:49155/slack/tolist/usernames' -H 'Content-Type: application/json' -d '{ "users": ["ncampbell"], "message": "Hi {username}, we noticed some Access Review items pending your approval. Please see https://jira.cs.sys/issues/?filter=43523 in order to view the review/approve tickets assigned to you pending your approval. As per each review ticket description, please *Approve* access or *Drive Changes*. (see Manager Access Review Process https://wiki.cs.sys/display/SECCOM/Manager+Access+Review+Process for detailed process walkthrough). Thank you for your help and feel free to tag our @access-review-team in #ask-compliance with any questions!" }'
    $router.post("/admin", async (oRequest, oResponse) => {
        login(oRequest, oResponse, $app.app.enums.userTypes.admin);
    }); //# /login/admin


    //#
    $router.post("/internal", async (oRequest, oResponse) => {
        login(oRequest, oResponse, $app.app.enums.userTypes.internal);
    }); //# /login/internal


    //#
    $router.post("/external", async (oRequest, oResponse) => {
        login(oRequest, oResponse, $app.app.enums.userTypes.external);
    }); //# /login/external


    //#
    $router.post("/app/:baseroute", async (oRequest, oResponse) => {
        //login(oRequest, oResponse, $app.app.enums.userTypes.external);
    }); //# /login/app


    //#
    $router.post("/basic/:baseroute", async (oRequest, oResponse) => {
        //login(oRequest, oResponse, $app.app.enums.userTypes.external);
    }); //# /login/basic


    //#
    $router.post('*', (oRequest, oResponse) => {
        oResponse.status(401).json({
            error: 'Incorrect username/password combination.'
        });
    }); //# /login/*

};
