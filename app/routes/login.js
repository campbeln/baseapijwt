//##################################################
//#
//#           ** DO NOT EDIT THIS FILE **
//#
//##################################################
//# Version: 2023-04-04a
'use strict';


//# Set the .exports to the Elmer route function definition
module.exports = function ($elmer, $router /*, $baseRouter */) {
    //# If this is .baseElmer, we need to enable the .json $bodyParser
    //#     NOTE: As the $bodyParser consumes the posted body, we must exclude any proxied routes (of which /login is not one)
    //#     SEE: https://stackoverflow.com/questions/28371641/how-can-i-use-express-http-proxy-after-bodyparser-json-has-been-called
    if ($elmer.app.config.baseElmer) {
        let $bodyParser = require("body-parser");

        $elmer.app.services.web.server.use("/login", $bodyParser.json({
            type: "*/*",
            //inflate: true,
            limit: '1mb'
        }));
    }

    //#
    require(__dirname + "/../middleware/_jwt.js")($elmer, null);


    //# curl -X POST http://localhost:45000/login/admin -H 'Content-Type: application/json' -d '{ "username":"cn", "password":"secret" }'
    $router.post("/admin", async (oRequest, oResponse) => {
        $elmer.app.services.security.jwt.login(oRequest, oResponse, $elmer.app.enums.userTypes.admin);
    }); //# /login/admin


    //#
    $router.post("/internal", async (oRequest, oResponse) => {
        $elmer.app.services.security.jwt.login(oRequest, oResponse, $elmer.app.enums.userTypes.internal);
    }); //# /login/internal


    //#
    $router.post("/", async (oRequest, oResponse) => {
        $elmer.app.services.security.jwt.login(oRequest, oResponse, $elmer.app.enums.userTypes.external);
    }); //# /login


    //# curl -X POST http://localhost:45000/login/verify/admin -H 'Content-Type: application/json' -d '{ "jwt":"JWT_GOES_HERE" }'
    $router.post("/verify/:mode", async (oRequest, oResponse) => {
        //# Return the result of $jwt.verify
        oResponse.status(200).json(
            $elmer.app.services.security.jwt.verify($elmer.resolve(oRequest.body, "jwt"))
        );
    }); //# /login/verify


    //#
    $router.all('*', async (oRequest, oResponse) => {
        oResponse.status(401).json($elmer.app.services.security.jwt.defaultError());
    }); //# /login/*

};
